// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum MFA_METHOD{
  EMAIL
}
model user {
  id                       String               @id @default(uuid())
  email                    String               @unique
  password                 String?
  prev_password            String?
  backup_email             String?
  
  is_banned                Boolean              @default(false)
  mfa_method               MFA_METHOD           @default(EMAIL)
  is_banned_at             DateTime?
  is_backup_email_verified Boolean              @default(false)
  backup_email_verified_at DateTime?
  mfa_enabled        Boolean              @default(false) 
  mfa_enabled_at     DateTime? 
  is_email_verified        Boolean              @default(false)
  email_verified_at        DateTime?
  image_url                String               @default("https://upload.wikimedia.org/wikipedia/commons/2/2c/Default_pfp.svg")
  created_at               DateTime             @default(now())
  verification_tokens      verification_token[]
  session                  session[]
  updated_at               DateTime             @updatedAt
}

enum SCOPE {
  SIGNUP
  BASIC_EDIT
  EMAIL_MFA
  PASSWORD_EDIT
}

model verification_token {
  id         String   @id @default(uuid())
  code       String
  user_id    String
  user       user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  scope SCOPE @default(SIGNUP)
  expires_at DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model session {
  id              String   @id @default(uuid())
  client          String
  ip              String
  parsed_location String
  last_used       DateTime @default(now())
  user_id         String
  user            user     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  expires_at      DateTime
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@map("Session")
}
